#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#define Max 100

char st[Max];
int top = -1;

void push(char st[], char val) {
    if (top == Max - 1) {
        printf("\n Stack overflow");
    } else {
        top++;
        st[top] = val;
    }
}

char pop(char st[]) {
    char val = ' ';
    if (top == -1) {
        printf("\n Stack underflow");
    } else {
        val = st[top];
        top--;
    }
    return val;
}

int getPriority(char op) {
    if (op == '/' || op == '*' || op == '%')
        return 1;
    else if (op == '+' || op == '-')
        return 0;
    return -1;
}

void InfixtoPostfix(char source[], char target[]) {
    int i = 0, j = 0;
    char temp;

    while (source[i] != '\0') {
        if (source[i] == '(') {
            push(st, source[i]);
            i++;
        } else if (source[i] == ')') {
            while (top != -1 && st[top] != '(') {
                target[j] = pop(st);
                j++;
            }
            if (top == -1) {
                printf("\n Incorrect expression");
                exit(1);
            }
            pop(st); // Pop the '('
            i++;
        } else if (isdigit(source[i]) || isalpha(source[i])) {
            target[j] = source[i];
            j++;
            i++;
        } else if (source[i] == '+' || source[i] == '-' || source[i] == '*' || source[i] == '/' || source[i] == '%') {
            while ((top != -1) && (st[top] != '(') && (getPriority(st[top]) >= getPriority(source[i]))) {
                target[j] = pop(st);
                j++;
            }
            push(st, source[i]);
            i++;
        } else {
            printf("Incorrect element in expression");
            exit(1);
        }
    }

    while (top != -1) {
        target[j] = pop(st);
        j++;
    }
    target[j] = '\0';
}

int main() {
    char infix[100], postfix[100];

    printf("Enter infix expression: ");
    fgets(infix, sizeof(infix), stdin);
    infix[strcspn(infix, "\n")] = 0;

    InfixtoPostfix(infix, postfix);
    printf("The corresponding postfix expression is: ");
    puts(postfix);

    return 0;
}

